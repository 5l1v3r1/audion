/**
 * Gulp file for project audion.
 */

// Let gulp plugins use ES6.
// The gulp-closure-compiler module uses ES6.
require('harmonize')();
var browserSync = require('browser-sync').create();
var gulp = require('gulp');
var change = require('gulp-change');
var closureCompiler = require('gulp-closure-compiler');
var closureCssRenamer = require('gulp-closure-css-renamer');
var concat = require('gulp-concat');
var htmlmin = require('gulp-htmlmin');
var less = require('gulp-less');
var util = require('gulp-util');
var argv = require('yargs').argv;


// Use 'gulp' to compile in advanced mode.
// Use 'gulp --whitespace' to compile in debug mode (only concat JS).
gulp.task('default', function() {
  // We must compile javascript after generating the CSS renaming map.
  compileCss().on('end', function() {
    // The tracing code is actually embedded as a string within the compiled JS.
    compileTracingEntryPoint().on('end', function() {
      compileTracingInjectorEntryPoint();
    });
    // The panel UI JS relies on the CSS rename mapping.
    compileDevToolsEntryPoint();
    compilePanelEntryPoint();
  });
  // The background script coordinates the other scripts and does not concern
  // CSS since it does not directly interact with the DOM.
  compileBackgroundScript();
  compileTabPageChangedEntryPoint();
  minifyHtml();
  copyThirdPartyJs();
  copyExtensionFiles();
  copyMediaFiles();
});


/**
 * Copies files necessary for the extension such as manifest.json.
 */
function copyExtensionFiles() {
  return gulp.src('chrome/**/*')
    .pipe(gulp.dest('build'));
}


/**
 * Copies media (images, etc) from the root directory to the build directory.
 */
function copyMediaFiles() {
  return gulp.src('media/**/*')
    .pipe(gulp.dest('build/media'));
}


/**
 * Minifies HTML.
 * @return {!Object} The gulp result from minification.
 */
function minifyHtml() {
  return gulp.src('html/*.html')
    .pipe(htmlmin({collapseWhitespace: true}))
    .pipe(gulp.dest('build'));
}


/**
 * Copies third party scripts to the build JS directory.
 * @return {!Object} The gulp result from piping the data.
 */
function copyThirdPartyJs() {
  return gulp.src('third_party/*.js')
    .pipe(gulp.dest('build/js'));
}


/**
 * Compiles JS for the background script entry point.
 * @return {!Object} The gulp result from compilation.
 */
function compileBackgroundScript() {
  return compileJs(
      'audion.entryPoints.background', 'build/js', 'background.js');
}


/**
 * Compiles JS for the entry point for reporting a page update.
 * @return {!Object} The gulp result from compilation.
 */
function compileTabPageChangedEntryPoint() {
  return compileJs(
      'audion.entryPoints.tabPageChanged', 'build/js', 'tab-page-changed.js');
}


/**
 * Compiles JS for the entry point for the content script that actually injects
 * the code for tracing into the page.
 * @return {!Object} The gulp result from compilation.
 */
function compileTracingInjectorEntryPoint() {
  return compileJs(
      'audion.entryPoints.injectTracing', 'build/js', 'inject-tracing.js');
}


/**
 * Compiles JS for the entry point into managing dev tools.
 * @return {!Object} The gulp result from compilation.
 */
function compileDevToolsEntryPoint() {
  return compileJs('audion.entryPoints.devTools', 'build/js', 'dev-tools.js');
}


/**
 * Compiles JS for the entry point into the dev panel.
 * @return {!Object} The gulp result from compilation.
 */
function compilePanelEntryPoint() {
  return compileJs('audion.entryPoints.panel', 'build/js', 'panel.js');
}


/**
 * Compiles JS for entry point for tracing web audio calls. This script is
 * injected into the web page and run in its name space. It's used in a second
 * compilation step to generate more JS.
 * @return {!Object} The gulp result from compilation.
 */
function compileTracingEntryPoint() {
  var destDirectory = 'js/auto-generated';
  return compileJs(
      'audion.entryPoints.tracing',
      destDirectory,
      'instrument-web-audio-code.js')
           .pipe(change(function(content) {
             // Wrap the generated code to inject for tracing with a closure.
             // Directly call the closure within this string.
             return "goog.provide('audion.autoGenerated.tracingCode');" +
                 '\n/** @type {string} */\n' +
                 'audion.autoGenerated.tracingCode = ' +
                 '\'(function(){' +
                 content
                     .replace(/\\/g, '\\\\')
                     .replace(/\n/g, "\\n")
                     .replace(/'/g, "\\'") +
                 '})();\';';
           }))
           .pipe(gulp.dest(destDirectory));
}


/**
 * Compiles JS.
 * @param {string} entryPoint The entry point. Must be provided somewhere.
 * @param {string} destDirectory The destination directory of compilation.
 * @param {string} compiledFileName The file name of the compiled script.
 * @return {!Object} The gulp result from compilation.
 */
function compileJs(entryPoint, destDirectory, compiledFileName) {
  // Determine whether to compile in whitespace mode for debugging.
  var closureCompilerFlags = {
    // The entry point for JS to run.
    closure_entry_point: [
      'cssVocabulary',
      entryPoint,
    ],

    externs: ['externs/**/*.js'],
    // Do not include any un-needed JS in our app.
    only_closure_dependencies: true,
    warning_level: 'VERBOSE'
  };

  if (argv.whitespace) {
    // Compile in whitespcae mode, which basically just concats the JS.
    closureCompilerFlags['compilation_level'] = 'WHITESPACE_ONLY';
    closureCompilerFlags['formatting'] = 'PRETTY_PRINT';
  } else {
    // Compile in advanced mode. Apply optimizations. Be more strict.
    closureCompilerFlags['compilation_level'] = 'ADVANCED_OPTIMIZATIONS';
  }

  // Compile and minify JS.
  var jsSrcs = [
      'js/**/*.js',
      'node_modules/google-closure-library/closure/**/*.js'
    ];
  return gulp.src(jsSrcs)
      .pipe(closureCompiler({
        compilerPath: 'node_modules/google-closure-compiler/compiler.jar',
        // The name of the compiled JS.
        fileName: compiledFileName,
        compilerFlags: closureCompilerFlags
      }))
      .on('error', logError)
      .pipe(gulp.dest(destDirectory));
}


/**
 * Compiles CSS.
 */
function compileCss() {
  // Minify CSS and create a rename mapping to be used during JS compilation.
  return gulp.src('js/**/*.css')
    .pipe(less())
    .on('error', logError)
    .pipe(concat('c.css'))
    .pipe(closureCssRenamer({
      compress: true,
      renameFile: 'js/closure/rename-mapping.js'
    }))
    .on('error', logError)
    .pipe(gulp.dest('build/css'));
}


/**
 * Logs an error message to the console.
 * @param {!Object|string} err The error object or string.
 */
function logError(err) {
  util.log(util.colors.red(err));
}