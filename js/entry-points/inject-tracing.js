goog.provide('audion.entryPoints.injectTracing');

goog.require('audion.autoGenerated.tracingCode');
goog.require('audion.entryPoints.ExtensionTag.FromTracing');
goog.require('audion.entryPoints.ExtensionTag.ToTracing');
goog.require('audion.messaging.MessageType');


/**
 * Handles messages from the background script to this content script. Many of
 * those messages are routed from the dev tools script.
 * @param {*} message
 * @private
 */
audion.entryPoints.handleMessageFromBackground_ = function(message) {
  if (!message) {
    return;
  }

  // Relay any messages from the background page to the window. Label it as from
  // this extension first.
  message = /** @type {!AudionTaggedMessage} */ (message);
  message.tag = audion.entryPoints.ExtensionTag.ToTracing;

  window.postMessage(message, window.location.origin || '*');
};


/**
 * The entry point for actually injecting tracing code into the page. This
 * script executes as a content script. Content scripts for Chrome extensions
 * ... are weird. They can manipulat the page DOM but execute JS in a context
 * different from that of the page. This prevents name collisions, but also
 * means that we cannot directly alter globals in the content script since the
 * page will not heed those changes. We must instead attach the code for
 * instrumenting web audio calls into script tag for execution.
 */
audion.entryPoints.injectTracing = function() {
  // Injects the code for tracing web audio calls into the web page via a script
  // tag. Sets up a connection with the background script for routing messages.

  // Execute the instrumentation script by attaching then removing a script tag.
  var scriptTag = document.createElement('script');
  // Enclose instrumentation logic within a closure to prevent overriding by the
  // page's variables.
  scriptTag.textContent = audion.autoGenerated.tracingCode;
  (document.head || document.documentElement).appendChild(scriptTag);
  scriptTag.remove();

  // Connect with the background page so that it can relay web audio updates to
  // the panel JS.
  var backgroundPageConnection = chrome.runtime.connect({
    'name': 'init_frame'
  });

  backgroundPageConnection.onMessage.addListener(
      audion.entryPoints.handleMessageFromBackground_);

  // Listen to messages from the page. Relay them to the background script.
  window.addEventListener('message', function(event) {
    if (event.source != window) {
      // We are not interested in messages from other windows.
      return;
    }

    var message = /** @type {?AudionTaggedMessage} */ (event.data);
    if (!message ||
         message.tag != audion.entryPoints.ExtensionTag.FromTracing) {
      // This message is not relevant to this extension.
      return;
    }

    // We do not need the tag that identifies this message as from this
    // extension if we are communicating with the background page. Prefer a
    // smaller message (for serialization).
    delete message.tag;
    backgroundPageConnection.postMessage(message);
  });

  // Tell the background page that this content script is ready to receive
  // messages. This kicks off a lot of routing logic in the background script.
  backgroundPageConnection.postMessage(
      /** @type {!AudionListenersReadyMessage} */ ({
    type: audion.messaging.MessageType.LISTENERS_READY
  }));
};


audion.entryPoints.injectTracing();
